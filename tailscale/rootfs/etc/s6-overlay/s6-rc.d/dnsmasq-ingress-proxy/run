#!/command/with-contenv bashio
# shellcheck shell=bash
# ==============================================================================
# Home Assistant Community Add-on: Tailscale
# Runs the dnsmasq ingress proxy
# ==============================================================================

readonly DNSMASQ_INGRESS_ADDRESS_IPV4="127.100.100.102"
readonly DNSMASQ_INGRESS_ADDRESS_IPV6="[::1]"
readonly DNSMASQ_INGRESS_PORT=54
readonly DNSMASQ_INGRESS_QUERY_PORT=55
readonly MAGIC_DNS_IPV4="100.100.100.100"
readonly MAGIC_DNS_IPV6="[fd7a:115c:a1e0::53]"

declare -a black_list

function setup_dnat() {
  local cmd="$1"
  local proto="$2"
  local ip_version="$3"
  local from_address="$4"
  local to_address="$5"
  local address_bits="$6"

  bashio::log.info "Setting up DNAT for dnsmasq ingress proxy (${proto}, ${ip_version})"
  if ${cmd} -t nat -S OUTPUT \
    | grep -Eq "^-A OUTPUT -d ${from_address//[\[\]]/}/${address_bits} -p ${proto} -m ${proto} ! --sport ${DNSMASQ_INGRESS_QUERY_PORT} --dport 53 -j DNAT --to-destination $(sed -r 's/(\[|\])/\\\1/g' <<< "${to_address}"):${DNSMASQ_INGRESS_PORT}$"
  then
    bashio::log.notice "DNAT is already set for dnsmasq ingress proxy (${proto}, ${ip_version})"
  else
    if ! ${cmd} -t nat -A OUTPUT -d ${from_address//[\[\]]/} -p ${proto} ! --sport ${DNSMASQ_INGRESS_QUERY_PORT} --dport 53 -j DNAT --to-destination ${to_address}:${DNSMASQ_INGRESS_PORT}; then
      bashio::log.warning "Setting up DNAT for dnsmasq ingress proxy is unsuccessful (${proto}, ${ip_version})"
    fi
  fi
}

function setup_snat() {
  local cmd="$1"
  local proto="$2"
  local ip_version="$3"
  local from_address="$4"
  local to_address="$5"
  local address_bits="$6"

  bashio::log.info "Setting up SNAT for dnsmasq ingress proxy (${proto}, ${ip_version})"
  if ${cmd} -t nat -S POSTROUTING \
    | grep -Eq "^-A POSTROUTING ! -s ${from_address//[\[\]]/}/${address_bits} -d ${to_address//[\[\]]/}/${address_bits} -p ${proto} -m ${proto} ! --sport ${DNSMASQ_INGRESS_QUERY_PORT} --dport ${DNSMASQ_INGRESS_PORT} -j SNAT --to-source ${from_address//[\[\]]/}$"
  then
    bashio::log.notice "SNAT is already set for dnsmasq ingress proxy (${proto}, ${ip_version})"
  else
    if ! ${cmd} -t nat -A POSTROUTING ! -s ${from_address//[\[\]]/} -d ${to_address//[\[\]]/} -p ${proto} ! --sport ${DNSMASQ_INGRESS_QUERY_PORT} --dport ${DNSMASQ_INGRESS_PORT} -j SNAT --to-source ${from_address//[\[\]]/}; then
      bashio::log.warning "Setting up SNAT for dnsmasq ingress proxy is unsuccessful (${proto}, ${ip_version})"
    fi
  fi
}

# This is to enable return packets, because TS will add a general DROP to prevent creating tailnet packets from lo
function setup_accept() {
  local cmd="$1"
  local ip_version="$2"
  local from_address="$3"
  local address_bits="$4"

  bashio::log.info "Setting up ACCEPT for dnsmasq ingress proxy (${ip_version})"
  if ${cmd} -S INPUT \
    | grep -Eq "^-A INPUT -s ${from_address//[\[\]]/}/${address_bits} -i lo -j ACCEPT$"
  then
    bashio::log.notice "ACCEPT is already set for dnsmasq ingress proxy (${ip_version})"
  else
    if ! ${cmd} -I INPUT -s ${from_address//[\[\]]/} -i lo -j ACCEPT; then
      bashio::log.warning "Setting up ACCEPT for dnsmasq ingress proxy is unsuccessful (${ip_version})"
    fi
  fi
}

bashio::log.info "Starting dnsmasq ingress proxy..."

setup_dnat "iptables" "udp" "IPv4" "${MAGIC_DNS_IPV4}" "${DNSMASQ_INGRESS_ADDRESS_IPV4}" "32"
setup_dnat "iptables" "tcp" "IPv4" "${MAGIC_DNS_IPV4}" "${DNSMASQ_INGRESS_ADDRESS_IPV4}" "32"
setup_dnat "ip6tables" "udp" "IPv6" "${MAGIC_DNS_IPV6}" "${DNSMASQ_INGRESS_ADDRESS_IPV6}" "128"
setup_dnat "ip6tables" "tcp" "IPv6" "${MAGIC_DNS_IPV6}" "${DNSMASQ_INGRESS_ADDRESS_IPV6}" "128"

setup_snat "iptables" "udp" "IPv4" "127.0.0.1" "${DNSMASQ_INGRESS_ADDRESS_IPV4}" "32"
setup_snat "iptables" "tcp" "IPv4" "127.0.0.1" "${DNSMASQ_INGRESS_ADDRESS_IPV4}" "32"
setup_snat "ip6tables" "udp" "IPv6" "[::1]" "${DNSMASQ_INGRESS_ADDRESS_IPV6}" "128"
setup_snat "ip6tables" "tcp" "IPv6" "[::1]" "${DNSMASQ_INGRESS_ADDRESS_IPV6}" "128"

setup_accept "iptables" "IPv4" "${MAGIC_DNS_IPV4}" "32"
setup_accept "ip6tables" "IPv6" "${MAGIC_DNS_IPV6}" "128"

readarray -t black_list < <(bashio::cache.get "dnsmasq-black-white-list")

# We need to delay the starting of the dependent services until iptables are configured
echo "" >&3

# This DNS replies NXDOMAIN for the black_list, otherwise forwards queries to MagicDNS
# Listens on port 54 and sends queries out on port 55
exec dnsmasq --no-hosts --no-resolv --keep-in-foreground --log-facility='-' \
  --listen-address=${DNSMASQ_INGRESS_ADDRESS_IPV4} --listen-address=${DNSMASQ_INGRESS_ADDRESS_IPV6//[\[\]]/} --bind-interfaces \
  --port=${DNSMASQ_INGRESS_PORT} --query-port=${DNSMASQ_INGRESS_QUERY_PORT} \
  --server=${MAGIC_DNS_IPV4} $(printf -- " --server=/%s/" "${black_list[@]}")
