#!/command/with-contenv bashio
# ==============================================================================
# Home Assistant Community Add-on: Tailscale
# Take down the S6 supervision tree when dnsmasq ingress proxy fails
# ==============================================================================
readonly exit_code_container=$(</run/s6-linux-init-container-results/exitcode)
readonly exit_code_service="${1}"
readonly exit_code_signal="${2}"
readonly service="dnsmasq-ingress-proxy"

readonly DNSMASQ_INGRESS_ADDRESS_IPV4="127.100.100.102"
readonly DNSMASQ_INGRESS_ADDRESS_IPV6="[::1]"
readonly DNSMASQ_INGRESS_PORT=54
readonly DNSMASQ_INGRESS_QUERY_PORT=55
readonly MAGIC_DNS_IPV4="100.100.100.100"
readonly MAGIC_DNS_IPV6="[fd7a:115c:a1e0::53]"

function remove_dnat() {
  local cmd="$1"
  local ip_version="$2"
  local from_address="$3"
  local to_address="$4"
  local address_bits="$5"

  local proto

  for proto in $( \
    ${cmd} -t nat -S OUTPUT \
    | { grep -E "^-A OUTPUT -d ${from_address//[\[\]]/}/${address_bits} -p \S+ -m \S+ ! --sport ${DNSMASQ_INGRESS_QUERY_PORT} --dport 53 -j DNAT --to-destination $(sed -r 's/(\[|\])/\\\1/g' <<< "${to_address}"):${DNSMASQ_INGRESS_PORT}$" || true ;} \
    | sed -nr 's/^.*?-p\s(\S+).*$/\1/p')
  do
    bashio::log.info "Removing DNAT for dnsmasq ingress proxy (${proto}, ${ip_version})"
    if ! ${cmd} -t nat -D OUTPUT -d ${from_address//[\[\]]/} -p ${proto} ! --sport ${DNSMASQ_INGRESS_QUERY_PORT} --dport 53 -j DNAT --to-destination ${to_address}:${DNSMASQ_INGRESS_PORT}; then
      bashio::log.warning "Removing DNAT for dnsmasq ingress proxy is unsuccessful (${proto}, ${ip_version})"
    fi
  done
}

function remove_snat() {
  local cmd="$1"
  local ip_version="$2"
  local from_address="$3"
  local to_address="$4"
  local address_bits="$5"

  local proto

  for proto in $( \
    ${cmd} -t nat -S POSTROUTING \
    | { grep -E "^-A POSTROUTING ! -s ${from_address//[\[\]]/}/${address_bits} -d ${to_address//[\[\]]/}/${address_bits} -p \S+ -m \S+ ! --sport ${DNSMASQ_INGRESS_QUERY_PORT} --dport ${DNSMASQ_INGRESS_PORT} -j SNAT --to-source ${from_address//[\[\]]/}$" || true ;} \
    | sed -nr 's/^.*?-p\s(\S+).*$/\1/p')
  do
    bashio::log.info "Removing SNAT for dnsmasq ingress proxy (${proto}, ${ip_version})"
    if ! ${cmd} -t nat -D POSTROUTING ! -s ${from_address//[\[\]]/} -d ${to_address//[\[\]]/} -p ${proto} ! --sport ${DNSMASQ_INGRESS_QUERY_PORT} --dport ${DNSMASQ_INGRESS_PORT} -j SNAT --to-source ${from_address//[\[\]]/}; then
      bashio::log.warning "Removing SNAT for dnsmasq ingress proxy is unsuccessful (${proto}, ${ip_version})"
    fi
  done
}

function remove_accept() {
  local cmd="$1"
  local ip_version="$2"
  local from_address="$3"
  local address_bits="$4"

  local i

  # Under normal circumstances it should run only once
  for i in $(seq $( \
    ${cmd} -S INPUT \
    | { grep -Ec "^-A INPUT -s ${from_address//[\[\]]/}/${address_bits} -i lo -j ACCEPT$" || true ;} ))
  do
    bashio::log.info "Removing ACCEPT for dnsmasq ingress proxy (${ip_version})"
    if ! ${cmd} -D INPUT -s ${from_address//[\[\]]/} -i lo -j ACCEPT; then
      bashio::log.warning "Removing ACCEPT for dnsmasq ingress proxy is unsuccessful (${ip_version})"
    fi
  done
}

remove_dnat "iptables" "IPv4" "${MAGIC_DNS_IPV4}" "${DNSMASQ_INGRESS_ADDRESS_IPV4}" "32"
remove_dnat "ip6tables" "IPv6" "${MAGIC_DNS_IPV6}" "${DNSMASQ_INGRESS_ADDRESS_IPV6}" "128"

remove_snat "iptables" "IPv4" "127.0.0.1" "${DNSMASQ_INGRESS_ADDRESS_IPV4}" "32"
remove_snat "ip6tables" "IPv6" "[::1]" "${DNSMASQ_INGRESS_ADDRESS_IPV6}" "128"

remove_accept "iptables" "IPv4" "${MAGIC_DNS_IPV4}" "32"
remove_accept "ip6tables" "IPv6" "${MAGIC_DNS_IPV6}" "128"

bashio::log.info \
  "Service ${service} exited with code ${exit_code_service}" \
  "(by signal ${exit_code_signal})"

if [[ "${exit_code_service}" -eq 256 ]]; then
  if [[ "${exit_code_container}" -eq 0 ]]; then
    echo $((128 + $exit_code_signal)) > /run/s6-linux-init-container-results/exitcode
  fi
  [[ "${exit_code_signal}" -eq 15 ]] && exec /run/s6/basedir/bin/halt
elif [[ "${exit_code_service}" -ne 0 ]]; then
  if [[ "${exit_code_container}" -eq 0 ]]; then
    echo "${exit_code_service}" > /run/s6-linux-init-container-results/exitcode
  fi
  exec /run/s6/basedir/bin/halt
fi
