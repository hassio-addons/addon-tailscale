#!/command/with-contenv bashio
# shellcheck shell=bash
# ==============================================================================
# Home Assistant Community Add-on: Tailscale
# Runs the MagicDNS ingress proxy
# ==============================================================================

source /usr/lib/trace.sh

readonly MAGIC_DNS_IPV4="100.100.100.100"

readonly DNSMASQ_INGRESS_PORT=53
readonly DNSMASQ_BLACK_WHITE_LIST_LOCATION="/etc/dnsmasq-black-white-list"

declare tailscale_address_ipv4
declare tailscale_address_ipv6
declare -a black_list
declare domain
declare -a options

bashio::log.info "Starting MagicDNS ingress proxy..."

options+=(--no-hosts)
options+=(--no-resolv)
options+=(--keep-in-foreground)
options+=(--log-facility='-')
options+=(--cache-size=0)

# Tailscale's local IP addresses
if ! tailscale_address_ipv4=$(/opt/tailscale ip -4) || \
  ! tailscale_address_ipv6=$(/opt/tailscale ip -6) || \
  bashio::var.is_empty "${tailscale_address_ipv4}" && bashio::var.is_empty "${tailscale_address_ipv6}"
then
  bashio::exit.nok "Failed to retrieve Tailscale's local address"
fi

# Listen addresses
if bashio::var.has_value "${tailscale_address_ipv4}"; then
  options+=(--listen-address=${tailscale_address_ipv4})
fi
if bashio::var.has_value "${tailscale_address_ipv6}"; then
  options+=(--listen-address=${tailscale_address_ipv6})
fi

options+=(--bind-dynamic)
options+=(--port=${DNSMASQ_INGRESS_PORT})

# Black-list
readarray -t black_list < ${DNSMASQ_BLACK_WHITE_LIST_LOCATION}

# Forward everything to MagicDNS, except the black_list
options+=(--server=${MAGIC_DNS_IPV4})
for domain in "${black_list[@]}"; do
  options+=(--server=/${domain}/)
done

if bashio_custom::trace; then
  options+=(--log-queries)
  options+=(--log-debug)
fi

magicdns-ingress-proxy-forwarding setup forwarding
magicdns-ingress-proxy-forwarding remove drop

# We need to delay the starting of the dependent services until iptables are configured
echo "" >&3

# This DNS replies NXDOMAIN for the black_list, otherwise forwards everything to MagicDNS
exec dnsmasq "${options[@]}"
