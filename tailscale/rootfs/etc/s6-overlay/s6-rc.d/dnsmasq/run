#!/command/with-contenv bashio
# shellcheck shell=bash
# ==============================================================================
# Home Assistant Community Add-on: Tailscale
# Runs the dnsmasq daemon
# ==============================================================================

readonly DNSMASQ_ADDRESS=127.52.52.52
readonly DEFAULT_HOSTNAME="controlplane.tailscale.com"
readonly LETSENCRYPT_HOSTNAME="acme-v02.api.letsencrypt.org"

declare hostname="${DEFAULT_HOSTNAME}"
declare -a addresses=()
declare -a host_records=()

bashio::log.info "Starting dnsmasq..."

function dig_addresses() {
  local hostname="$1"
  dig ${hostname} A ${hostname} AAAA +short | { grep -Ev '^;|\.$|^$' || true ;}
}

function add_addresses_to_host_records() {
  local hostname="$1"
  local address
  for address in "${addresses[@]}"; do
    if [[ "${address}" =~ .*:.* ]]; then
      host_records+=("--host-record=${hostname},,${address},0")
    else
      host_records+=("--host-record=${hostname},${address},,0")
    fi
  done
}

# Get hostname if configured
if bashio::config.has_value "login_server"; then
  # We have to be able to resolve this address
  if ! hostname=$(awk -F[/:] '{print $4}' <<<$(bashio::config "login_server")) || \
    ! bashio::var.has_value "${hostname}"
  then
    bashio::log.error "Determining host name from '$(bashio::config "login_server")' has failed"
    bashio::exit.nok
  fi
fi

# Resolve hostname
if [[ "${hostname}" != "${DEFAULT_HOSTNAME}" ]]; then
  # If non-TS controlplane is used, we must be able to resolve it before TS starts up, there is built-in fallback mechanism in TS only for it's own controlplane
  if ! readarray -t addresses < <(dig_addresses ${hostname}) || \
    (( 0 == ${#addresses[@]} ))
  then
    bashio::log.error "Resolving '${hostname}' has failed"
    bashio::exit.nok
  fi
else
  # This is a best effort, if we fail, let TS use it's DERP servers as fallback bootstrap DNS servers
  readarray -t addresses < <(dig_addresses ${hostname}) || true
  if (( 0 == ${#addresses[@]} )); then
    bashio::log.warning "Resolving '${hostname}' has failed, Tailscale will start up slower, using it's DERP servers as fallback bootstrap DNS servers."
  fi
fi
add_addresses_to_host_records ${hostname}

# If serve or funnel is used, resolve letsencrypt's api also
if bashio::config.equals 'proxy' 'true'; then
  if ! readarray -t addresses < <(dig_addresses ${LETSENCRYPT_HOSTNAME}) || \
    (( 0 == ${#addresses[@]} ))
  then
    bashio::log.error "Resolving '${LETSENCRYPT_HOSTNAME}' has failed"
    bashio::exit.nok
  fi
  add_addresses_to_host_records ${LETSENCRYPT_HOSTNAME}
fi

# We need to delay the starting of the dependent services until the conf file is written
echo "nameserver ${DNSMASQ_ADDRESS}" > /etc/resolv.dnsmasq.conf
echo "" >&3

# This is a dummy DNS to provide bootstrap DNS resolution for the login_server option, otherwise answers REFUSED for everything
# It is also required to suppress tailscaled warnings about not configured upstream on each DNS query
# It must run on port 53 to be able to specify it in a resolv.conf
exec dnsmasq --no-hosts --no-resolv --keep-in-foreground --log-facility='-' --listen-address=${DNSMASQ_ADDRESS} --port=53 --bind-interfaces "${host_records[@]}"
