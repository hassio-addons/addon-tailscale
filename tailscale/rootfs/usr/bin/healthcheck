#!/command/with-contenv bashio
# shellcheck shell=bash

# Plain (non-json) tailscale status returns error when status is not Running or Starting, so eg. NeedsLogin and NeedsMachineAuth would make it unhealthy
# The .Health json filter returns any problems, so even temporary health problems would make it unhealthy
# This script treats the following situations unhealthy:
# - always: .BackendState == "Stopped"
# - optionally: if once was online but gets offline for more then healthcheck_offline_timeout seconds (configurable)
# - optionally: if never gets online for more then healthcheck_restart_timeout seconds (configurable)
#   This can handle internal TS bugs, like https://github.com/tailscale/tailscale/issues/12021 where TS fails to recover from rerouting traffic from normal WAN to failover WAN

# Redirect healthchecks' output to the log
exec &> /proc/1/fd/1

declare status_json
declare backend_state is_self_online
# STARTED_TIMESTAMP is in contenv at /var/run/s6/container_environment
# LAST_ONLINE_TIMESTAMP is in contenv at /var/run/s6/container_environment
# LAST_REPORTED_HEALTH_STATE is in contenv at /var/run/s6/container_environment

if bashio::config.has_value "healthcheck_restart_timeout" && \
  ! bashio::var.has_value "${STARTED_TIMESTAMP-}"
then
  STARTED_TIMESTAMP=$(date +"%s")
  printf "${STARTED_TIMESTAMP}" > /var/run/s6/container_environment/STARTED_TIMESTAMP
fi

status_json=$(/opt/tailscale status --json --self=true --peers=false)
backend_state=$(jq -r '.BackendState' <<< "${status_json}")
is_self_online=$(jq -r '.Self.Online' <<< "${status_json}")

if (bashio::config.has_value "healthcheck_offline_timeout" || bashio::config.has_value "healthcheck_restart_timeout") && \
  bashio::var.equals "${backend_state}" "Running" && bashio::var.true "${is_self_online}"
then
  LAST_ONLINE_TIMESTAMP=$(date +"%s")
  printf "${LAST_ONLINE_TIMESTAMP}" > /var/run/s6/container_environment/LAST_ONLINE_TIMESTAMP
fi

if [[ "${backend_state}" == "Stopped" ]] || \
  (bashio::config.has_value "healthcheck_offline_timeout" && \
    bashio::var.has_value "${LAST_ONLINE_TIMESTAMP-}" && \
    (( $(date +"%s") - ${LAST_ONLINE_TIMESTAMP} > $(bashio::config "healthcheck_offline_timeout") )) ) || \
  (bashio::config.has_value "healthcheck_restart_timeout" && \
    ! bashio::var.has_value "${LAST_ONLINE_TIMESTAMP-}" && \
    (( $(date +"%s") - ${STARTED_TIMESTAMP} > $(bashio::config "healthcheck_restart_timeout") )) )
then
  # Unhealthy
  if ! bashio::var.equals "${LAST_REPORTED_HEALTH_STATE-}" "UNHEALTHY"; then
    printf "UNHEALTHY" > /var/run/s6/container_environment/LAST_REPORTED_HEALTH_STATE
  fi
  # Log it always
  bashio::log.fatal "Add-on is unhealthy"
  bashio::exit.nok
else
  # Healthy
  if ! bashio::var.equals "${LAST_REPORTED_HEALTH_STATE-}" "HEALTHY"; then
    printf "HEALTHY" > /var/run/s6/container_environment/LAST_REPORTED_HEALTH_STATE
    # Log it only once
    bashio::log.info "Add-on is healthy"
  fi
fi
