#!/command/with-contenv bashio
# shellcheck shell=bash
# ==============================================================================
# Print possible subnet routes to stdout
# ==============================================================================
declare interface
declare -a addresses=()
declare address
declare -a routes=()
declare ipinfo
declare response

function appendarray() {
  local -n array=${1}
  readarray -t -O "${#array[@]}" array
}

if ! [[ "${1-}" =~ ^(local|advertised)$ ]]; then
  echo "Usage: $(basename "$0") local|advertised" 1>&2
  exit 1
fi

if bashio::cache.exists "subnet-routes-$1"; then
  readarray -t routes < <(bashio::cache.get "subnet-routes-$1")
  printf -v response "%s" "${routes[@]/%/$'\n'}"
else
  if [[ "$1" == "advertised" ]]; then
    # Use configured values
    for address in $(bashio::config "advertise_routes"); do
      if [[ "${address}" =~ ^local.subnets$ ]]; then
        # Handle special value, collect local subnets
        readarray -t routes < <(subnet-routes local)
        if (( 0 == ${#routes[@]} )); then
          bashio::log.warning \
            "There are no local subnets to advertise!" \
            "Restart of the add-on is required after the issue is fixed!"
        fi
      else
        addresses+=("${address}")
      fi
    done
  else
    # Find interfaces and matching addresses from which we can extract routes
    for interface in $(bashio::network.interfaces); do
      appendarray addresses < <(bashio::network.ipv4_address "${interface}")
      appendarray addresses < <(bashio::network.ipv6_address "${interface}")
    done
  fi

  # Extract routes from addresses
  for address in "${addresses[@]}"; do
    if bashio::var.has_value "${address}"; then
      # Skip local link addresses
      if [[ "${address:0:6}" == "fe80::" ]] || [[ "${address:0:8}" == "169.254." ]];
      then
        continue
      fi

      # Skip if forwarding for the address family is disabled
      if [[ "${address}" =~ .*:.* ]];
      then
        [[ $(</proc/sys/net/ipv6/conf/all/forwarding) -eq 0 ]] && continue
      else
        [[ $(</proc/sys/net/ipv4/ip_forward) -eq 0 ]] && continue
      fi

      ipinfo="$(/usr/bin/ipcalc --json "${address}")"
      routes+=("$(bashio::jq "${ipinfo}" '.NETWORK + "/" + .PREFIX')")
    fi
  done

  # Remove duplicate entries from routes
  readarray -t routes < <(printf "%s" "${routes[@]/%/$'\n'}" | sort -u)

  printf -v response "%s" "${routes[@]/%/$'\n'}"
  bashio::cache.set "subnet-routes-$1" "${response}"
fi

printf "%s" "${response}"
